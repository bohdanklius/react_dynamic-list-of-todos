{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","input","filterOption","inputChangeHandler","event","setState","target","name","value","selectChangeHadler","filterTodos","todos","filteredTodosByTitle","filter","todo","title","includes","completed","this","props","selectedUserChanger","currentUserId","className","placeholder","onChange","map","classNames","key","id","type","readOnly","userId","onClick","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","setUser","prevProps","a","data","email","phone","clearUser","App","selectedUserId","changeSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d4d2671.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    input: '',\n    filterOption: 'All',\n  }\n\n  inputChangeHandler = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  selectChangeHadler = (event) => {\n    this.setState({ filterOption: event.target.value });\n  }\n\n  filterTodos = (todos) => {\n    const { input, filterOption } = this.state;\n    const filteredTodosByTitle = todos.filter((todo) => {\n      if (todo.title) {\n        return todo.title.includes(input);\n      }\n\n      return false;\n    });\n\n    switch (filterOption) {\n      case 'Active':\n        return filteredTodosByTitle.filter(todo => !todo.completed);\n      case 'Completed':\n        return filteredTodosByTitle.filter(todo => todo.completed);\n      default:\n        return filteredTodosByTitle;\n    }\n  }\n\n  render() {\n    const { todos, selectedUserChanger, currentUserId } = this.props;\n    const { input, filterOption } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          name=\"input\"\n          value={input}\n          placeholder=\"Search by title\"\n          onChange={this.inputChangeHandler}\n        />\n\n        <select\n          name=\"select\"\n          value={filterOption}\n          onChange={this.selectChangeHadler}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(todos).map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected':\n                        todo.userId === currentUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectedUserChanger(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst TodosType = PropTypes.arrayOf(\n  PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    completed: PropTypes.bool,\n  }),\n);\n\nTodoList.propTypes = {\n  todos: TodosType.isRequired,\n  selectedUserChanger: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => (\n  fetch(API_URL + url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n\nexport const getTodos = () => (request('/todos'));\n\nexport const getUser = userId => (request(`/users/${userId}`));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.setUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.setUser();\n    }\n  }\n\n  async setUser() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos: todos.data,\n        });\n      });\n  }\n\n  changeSelectedUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserChanger={this.changeSelectedUser}\n            currentUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}